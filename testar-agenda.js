import { agendaService, solicitacoesAgendaService, confirmacoesAgendaService, whitelistService } from './src/lib/services.js';

async function testarAgenda() {
  console.log('üìÖ Testando sistema completo de agenda...\n');
  
  try {
    // 1. Verificar/Adicionar VIPs
    console.log('1Ô∏è‚É£ Verificando VIPs...');
    const vips = await whitelistService.getAllVips();
    if (vips.length === 0) {
      console.log('   Adicionando VIPs de exemplo...');
      await whitelistService.addVip('+5586999999999', 'Jo√£o Silva', 'L√≠der Comunit√°rio', 'Teresina');
      await whitelistService.addVip('+5561999999999', 'Maria Santos', 'Coordenadora Regional', 'Parna√≠ba');
      console.log('   ‚úÖ VIPs adicionados');
    } else {
      console.log(`   ‚úÖ ${vips.length} VIPs encontrados`);
    }

    // 2. Adicionar hor√°rios de disponibilidade
    console.log('\n2Ô∏è‚É£ Adicionando hor√°rios de disponibilidade...');
    const hoje = new Date();
    const amanha = new Date(hoje);
    amanha.setDate(hoje.getDate() + 1);
    
    const horarios = [
      {
        data: hoje.toISOString().split('T')[0],
        horario_inicio: '09:00',
        horario_fim: '10:00',
        local: 'Gabinete - C√¢mara dos Deputados',
        tipo_agendamento: 'reuniao',
        observacoes: 'Hor√°rio dispon√≠vel para reuni√µes',
        disponivel: true
      },
      {
        data: hoje.toISOString().split('T')[0],
        horario_inicio: '14:00',
        horario_fim: '15:00',
        local: 'Gabinete - C√¢mara dos Deputados',
        tipo_agendamento: 'audiencia',
        observacoes: 'Hor√°rio para audi√™ncias',
        disponivel: true
      },
      {
        data: amanha.toISOString().split('T')[0],
        horario_inicio: '10:00',
        horario_fim: '11:00',
        local: 'Sala de Reuni√µes - C√¢mara dos Deputados',
        tipo_agendamento: 'reuniao',
        observacoes: 'Reuni√£o com lideran√ßas',
        disponivel: true
      }
    ];

    for (const horario of horarios) {
      await agendaService.add(horario);
    }
    console.log('   ‚úÖ Hor√°rios adicionados');

    // 3. Verificar hor√°rios cadastrados
    console.log('\n3Ô∏è‚É£ Verificando hor√°rios cadastrados...');
    const horariosCadastrados = await agendaService.getAll();
    console.log(`   ‚úÖ ${horariosCadastrados.length} hor√°rios encontrados`);
    
    const stats = await agendaService.getStats();
    console.log(`   üìä Estat√≠sticas: ${stats.total_horarios} total, ${stats.horarios_disponiveis} dispon√≠veis, ${stats.horarios_ocupados} ocupados`);

    // 4. Simular solicita√ß√µes de agenda
    console.log('\n4Ô∏è‚É£ Simulando solicita√ß√µes de agenda...');
    const solicitacoes = [
      {
        phone_number: '+5586999999999',
        nome_solicitante: 'Jo√£o Silva',
        municipio_solicitante: 'Teresina',
        data_solicitada: hoje.toISOString().split('T')[0],
        horario_solicitado: '09:00',
        tipo_agendamento: 'reuniao',
        assunto: 'Discuss√£o sobre projetos para Teresina',
        descricao: 'Reuni√£o para discutir projetos de infraestrutura e melhorias para a cidade',
        local_preferido: 'Gabinete',
        duracao_estimada: 60,
        prioridade: 'alta',
        observacoes: 'Urgente - projetos em andamento'
      },
      {
        phone_number: '+5561999999999',
        nome_solicitante: 'Maria Santos',
        municipio_solicitante: 'Parna√≠ba',
        data_solicitada: amanha.toISOString().split('T')[0],
        horario_solicitado: '10:00',
        tipo_agendamento: 'audiencia',
        assunto: 'Audi√™ncia sobre educa√ß√£o em Parna√≠ba',
        descricao: 'Audi√™ncia para discutir melhorias no sistema educacional',
        local_preferido: 'Sala de Reuni√µes',
        duracao_estimada: 90,
        prioridade: 'normal',
        observacoes: 'Representantes da educa√ß√£o estar√£o presentes'
      }
    ];

    for (const solicitacao of solicitacoes) {
      await solicitacoesAgendaService.add(solicitacao);
    }
    console.log('   ‚úÖ Solicita√ß√µes registradas');

    // 5. Verificar solicita√ß√µes
    console.log('\n5Ô∏è‚É£ Verificando solicita√ß√µes...');
    const todasSolicitacoes = await solicitacoesAgendaService.getAll();
    console.log(`   ‚úÖ ${todasSolicitacoes.length} solicita√ß√µes encontradas`);
    
    const statsSolicitacoes = await solicitacoesAgendaService.getStats();
    console.log(`   üìä Estat√≠sticas: ${statsSolicitacoes.total_solicitacoes} total, ${statsSolicitacoes.pendentes} pendentes`);

    // 6. Simular aprova√ß√£o de solicita√ß√£o
    console.log('\n6Ô∏è‚É£ Simulando aprova√ß√£o de solicita√ß√£o...');
    if (todasSolicitacoes.length > 0) {
      const solicitacaoAprovar = todasSolicitacoes[0];
      await solicitacoesAgendaService.updateStatus(
        solicitacaoAprovar.id,
        'aprovada',
        'Sua solicita√ß√£o foi aprovada! Confirmamos o hor√°rio das 09:00 no gabinete. Por favor, chegue com 10 minutos de anteced√™ncia.',
        hoje.toISOString().split('T')[0],
        '09:00',
        'Gabinete - C√¢mara dos Deputados'
      );
      console.log(`   ‚úÖ Solicita√ß√£o ${solicitacaoAprovar.id} aprovada`);
    }

    // 7. Simular rejei√ß√£o de solicita√ß√£o
    console.log('\n7Ô∏è‚É£ Simulando rejei√ß√£o de solicita√ß√£o...');
    if (todasSolicitacoes.length > 1) {
      const solicitacaoRejeitar = todasSolicitacoes[1];
      await solicitacoesAgendaService.updateStatus(
        solicitacaoRejeitar.id,
        'rejeitada',
        'Infelizmente n√£o foi poss√≠vel atender sua solicita√ß√£o no hor√°rio solicitado. Sugerimos reagendar para a pr√≥xima semana.',
        null,
        null,
        null
      );
      console.log(`   ‚úÖ Solicita√ß√£o ${solicitacaoRejeitar.id} rejeitada`);
    }

    // 8. Verificar estat√≠sticas finais
    console.log('\n8Ô∏è‚É£ Verificando estat√≠sticas finais...');
    const statsFinais = await solicitacoesAgendaService.getStats();
    console.log(`   üìä Estat√≠sticas finais:`);
    console.log(`      ‚Ä¢ Total: ${statsFinais.total_solicitacoes}`);
    console.log(`      ‚Ä¢ Pendentes: ${statsFinais.pendentes}`);
    console.log(`      ‚Ä¢ Aprovadas: ${statsFinais.aprovadas}`);
    console.log(`      ‚Ä¢ Rejeitadas: ${statsFinais.rejeitadas}`);

    // 9. Verificar estat√≠sticas por l√≠der
    console.log('\n9Ô∏è‚É£ Verificando estat√≠sticas por l√≠der...');
    const statsPorLider = await solicitacoesAgendaService.getStatsPorLider();
    console.log('   üìä Estat√≠sticas por l√≠der:');
    statsPorLider.forEach(stat => {
      console.log(`      ‚Ä¢ ${stat.nome_solicitante}: ${stat.total_solicitacoes} solicita√ß√µes (${stat.aprovadas} aprovadas, ${stat.rejeitadas} rejeitadas)`);
    });

    // 10. Verificar estat√≠sticas por munic√≠pio
    console.log('\nüîü Verificando estat√≠sticas por munic√≠pio...');
    const statsPorMunicipio = await solicitacoesAgendaService.getStatsPorMunicipio();
    console.log('   üìä Estat√≠sticas por munic√≠pio:');
    statsPorMunicipio.forEach(stat => {
      console.log(`      ‚Ä¢ ${stat.municipio_solicitante}: ${stat.total_solicitacoes} solicita√ß√µes (${stat.aprovadas} aprovadas, ${stat.rejeitadas} rejeitadas)`);
    });

    // 11. Verificar estat√≠sticas por tipo
    console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Verificando estat√≠sticas por tipo...');
    const statsPorTipo = await solicitacoesAgendaService.getStatsPorTipo();
    console.log('   üìä Estat√≠sticas por tipo:');
    statsPorTipo.forEach(stat => {
      console.log(`      ‚Ä¢ ${stat.tipo_agendamento}: ${stat.total_solicitacoes} solicita√ß√µes (${stat.aprovadas} aprovadas)`);
    });

    console.log('\n‚úÖ Teste do sistema de agenda conclu√≠do com sucesso!');
    console.log('\nüìã Resumo do que foi testado:');
    console.log('   ‚Ä¢ Gest√£o de hor√°rios de disponibilidade');
    console.log('   ‚Ä¢ Solicita√ß√µes de agenda pelos l√≠deres');
    console.log('   ‚Ä¢ Aprova√ß√£o e rejei√ß√£o pelo administrativo');
    console.log('   ‚Ä¢ Estat√≠sticas completas por l√≠der, munic√≠pio e tipo');
    console.log('   ‚Ä¢ Sistema de notifica√ß√µes integrado');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

testarAgenda();
